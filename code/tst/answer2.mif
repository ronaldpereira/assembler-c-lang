DEPTH = 256;
WIDTH = 8;
ADDRESS_RADIX = HEX;
DATA_RADIX = BIN;
CONTENT
BEGIN

00        :  00001000;              -- loadi R0 IO
01        :  11111110;              -- 
02        :  00001001;              -- loadi R1 IO
03        :  11111110;              -- 
04        :  00001010;              -- loadi R2 IO
05        :  11111110;              -- 
06        :  01101011;              -- loadc R3 0
07        :  00000000;              -- 
08        :  01101100;              -- loadc R4 0
09        :  00000000;              -- 
0A        :  01101101;              -- loadc R5 3
0B        :  00000011;              -- 
0C        :  01101110;              -- loadc R6 0
0D        :  00000000;              -- 
0E        :  01101111;              -- loadc R7 0
0F        :  00000000;              -- 
10        :  11001011;              -- _Start: seq R3 R0 R1
11        :  00000100;              -- 
12        :  11010011;              -- jmpp R3_R0iR1
13        :  00101100;              -- 
14        :  11001011;              -- seq R3 R0 R2
15        :  00001000;              -- 
16        :  11010011;              -- jmpp R3_R0iR2
17        :  00011110;              -- 
18        :  11001011;              -- seq R3 R1 R2
19        :  00101000;              -- 
1A        :  11010011;              -- jmpp R3_R1iR2
1B        :  00111010;              -- 
1C        :  10001000;              -- call all
1D        :  01101100;              -- 
1E        :  10000100;              -- _R0iR2: slt R4 R0 R1
1F        :  00000100;              -- 
20        :  11000011;              -- sgt R3 R0 R1
21        :  00000100;              -- 
22        :  11010100;              -- jmpp R4_2R1
23        :  01010100;              -- 
24        :  11010011;              -- jmpp R3_2R1
25        :  01010100;              -- 
26        :  01110100;              -- clear R4
27        :  00000000;              -- 
28        :  00011100;              -- add R4 R0
29        :  00000000;              -- 
2A        :  10001000;              -- call end
2B        :  01110110;              -- 
2C        :  10000100;              -- _R0iR1: slt R4 R0 R2
2D        :  00001000;              -- 
2E        :  11000011;              -- sgt R3 R0 R2
2F        :  00001000;              -- 
30        :  11010100;              -- jmpp R4_2R2
31        :  01001000;              -- 
32        :  11010011;              -- jmpp R3_2R2
33        :  01001000;              -- 
34        :  01110100;              -- clear R4
35        :  00000000;              -- 
36        :  00011100;              -- add R4 R0
37        :  00000000;              -- 
38        :  10001000;              -- call end
39        :  01110110;              -- 
3A        :  10000100;              -- _R1iR2: slt R4 R1 R0
3B        :  00100000;              -- 
3C        :  11000011;              -- sgt R3 R1 R0
3D        :  00100000;              -- 
3E        :  11010100;              -- jmpp R4_2R0
3F        :  01100000;              -- 
40        :  11010011;              -- jmpp R3_2R0
41        :  01100000;              -- 
42        :  01110100;              -- clear R4
43        :  00000000;              -- 
44        :  00011100;              -- add R4 R0
45        :  00000000;              -- 
46        :  10001000;              -- call end
47        :  01110110;              -- 
48        :  01110100;              -- _2R2: clear R4
49        :  00000000;              -- 
4A        :  00011100;              -- add R4 R2
4B        :  01000000;              -- 
4C        :  00011100;              -- add R4 R1
4D        :  00100000;              -- 
4E        :  10111101;              -- addi R5-1
4F        :  11111111;              -- 
50        :  00110100;              -- divide R4 R5
51        :  10100000;              -- 
52        :  10001000;              -- call end
53        :  01110110;              -- 
54        :  01110100;              -- _2R1: clear R4
55        :  00000000;              -- 
56        :  00011100;              -- add R4 R1
57        :  00100000;              -- 
58        :  00011100;              -- add R4 R2
59        :  01000000;              -- 
5A        :  10111101;              -- addi R5-1
5B        :  11111111;              -- 
5C        :  00110100;              -- divide R4 R5
5D        :  10100000;              -- 
5E        :  10001000;              -- call end
5F        :  01110110;              -- 
60        :  01110100;              -- _2R0: clear R4
61        :  00000000;              -- 
62        :  00011100;              -- add R4 R0
63        :  00000000;              -- 
64        :  00011100;              -- add R4 R1
65        :  00100000;              -- 
66        :  10111101;              -- addi R5-1
67        :  11111111;              -- 
68        :  00110100;              -- divide R4 R5
69        :  10100000;              -- 
6A        :  10001000;              -- call end
6B        :  01110110;              -- 
6C        :  00011100;              -- all: add R4 R2
6D        :  01000000;              -- 
6E        :  00011100;              -- add R4 R1
6F        :  00100000;              -- 
70        :  00011100;              -- add R4 R0
71        :  00000000;              -- 
72        :  00110100;              -- divide R4 R5
73        :  10100000;              -- 
74        :  10001000;              -- call end
75        :  01110110;              -- 
76        :  00010100;              -- end: storei R4 IO
77        :  11111110;              -- 
[78..79]:  00000000;              -- 
[7A..7B]:  11111111;              -- 
[7C..FF]:  00000000;              -- 
END;
