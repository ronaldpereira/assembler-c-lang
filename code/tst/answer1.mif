DEPTH = 256;
WIDTH = 8;
ADDRESS_RADIX = HEX;
DATA_RADIX = BIN;
CONTENT
BEGIN

00        :  00001000;              -- loadi R0 IO ; entrada1
01        :  11111110;              -- 
02        :  00001001;              -- loadi R1 IO ; entrada2
03        :  11111110;              -- 
04        :  00001010;              -- loadi R2 IO ; entrada3
05        :  11111110;              -- 
06        :  00010011;              -- storei R3 zero
07        :  01000100;              -- 
08        :  00010100;              -- storei R4 zero
09        :  01000100;              -- 
0A        :  00010101;              -- storei R5 zero
0B        :  01000100;              -- 
0C        :  00100100;              -- _Start: subtract R4 R0
0D        :  00000000;              -- 
0E        :  00011100;              -- add R4 R1
0F        :  00100000;              -- 
10        :  11010100;              -- jmpp R4_R1sR0
11        :  00011100;              -- 
12        :  01001100;              -- jmpn R4_R0sR1
13        :  00010100;              -- 
14        :  00100011;              -- _R0sR1: subtract R3 R0
15        :  00000000;              -- 
16        :  00011011;              -- add R3 R2
17        :  01000000;              -- 
18        :  11010011;              -- jmpp R3_R2s
19        :  00101100;              -- 
1A        :  01001011;              -- jmpn R3_R0s
1B        :  00100100;              -- 
1C        :  00100011;              -- _R1sR0: subtract R3 R1
1D        :  00100000;              -- 
1E        :  00011011;              -- add R3 R2
1F        :  01000000;              -- 
20        :  11010011;              -- jmpp R3_R2s
21        :  00101100;              -- 
22        :  01001011;              -- jmpn R3_R1s
23        :  00101000;              -- 
24        :  01010101;              -- _R0s: move R5 R0
25        :  00000000;              -- 
26        :  00111000;              -- jump _pos
27        :  00110000;              -- 
28        :  01010101;              -- _R1s: move R5 R1
29        :  00100000;              -- 
2A        :  00111000;              -- jump _pos
2B        :  00110000;              -- 
2C        :  01010101;              -- _R2s: move R5 R2
2D        :  01000000;              -- 
2E        :  00111000;              -- jump _pos
2F        :  00110000;              -- 
30        :  00101101;              -- _pos: multiply R5 R5
31        :  10100000;              -- 
32        :  10111101;              -- addi R5 1
33        :  00000001;              -- 
34        :  01110000;              -- clear R0
35        :  00000000;              -- 
36        :  01110001;              -- clear R1
37        :  00000000;              -- 
38        :  01110010;              -- clear R2
39        :  00000000;              -- 
3A        :  01110011;              -- clear R3
3B        :  00000000;              -- 
3C        :  01110100;              -- clear R4
3D        :  00000000;              -- 
3E        :  00010101;              -- storei R5 IO ; output R5
3F        :  11111110;              -- 
[40..41]:  00000000;              -- 
[42..43]:  11111111;              -- 
[44..46]:  00000000;              -- one: .data 2 1 ; somente para teste
47        :  00000001;              -- 
[48..FF]:  00000000;              -- 
END;
