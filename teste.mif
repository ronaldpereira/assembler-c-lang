DEPTH = 256;
WIDTH = 8;
ADDRESS_RADIX = HEX;
DATA_RADIX = BIN;
CONTENT
BEGIN

00        :  00001011;              -- loadi R3 negOne ; load -1 -> R3
01        :  00101100;              -- 
02        :  00001000;              -- loadi R0 IO ; read n -> R0
03        :  11111110;              -- 
04        :  00001001;              -- loadi R1 IO ; read m -> R1
05        :  11111110;              -- 
06        :  01001001;              -- jmpn R1_fixSign ; if m < 0 jump to fixSign
07        :  00001010;              -- 
08        :  00111000;              -- jump _clearR2 ; jump to clear
09        :  00010010;              -- 
0A        :  01010010;              -- _fixSign: move R2 R1 ; fixSign: m -> R2
0B        :  00100000;              -- 
0C        :  00100001;              -- subtract R1 R1 ; R1 = R1 - R1 = 0
0D        :  00100000;              -- 
0E        :  00100001;              -- subtract R1 R2 ; R1 = R1 - R2 = -m (= abs(m))
0F        :  01000000;              -- 
10        :  00010011;              -- storei R3 sign ; store -1 into sign
11        :  00101110;              -- 
12        :  00100010;              -- _clearR2: subtract R2 R2 ; clear R2
13        :  01000000;              -- 
14        :  01000001;              -- _Start: jmpz R1_Done ; Start: jump to Done if m = 0.
15        :  00011110;              -- 
16        :  00011010;              -- add R2 R0 ; add n to the sum in R2
17        :  00000000;              -- 
18        :  00001111;              -- loadi R7 one
19        :  00110000;              -- 
1A        :  00100001;              -- subtract R1 R7
1B        :  11100000;              -- 
1C        :  00111000;              -- jump _Start ; go back to Start
1D        :  00010100;              -- 
1E        :  00001000;              -- _Done: loadi R0 sign ; Done: load the sign into R0
1F        :  00101110;              -- 
20        :  01001000;              -- jmpn R0_neg ; if sign < 0 jump to neg
21        :  00100100;              -- 
22        :  00111000;              -- jump _pos ; jump to pos
23        :  00101000;              -- 
24        :  00100001;              -- _neg: subtract R1 R2 ; neg: R1 = R1-R2 = -sum
25        :  01000000;              -- 
26        :  01010010;              -- move R2 R1 ; copy R1 into R2
27        :  00100000;              -- 
28        :  00010010;              -- _pos: storei R2 IO ; pos: output the final sum in R2
29        :  11111110;              -- 
[2A..2B]:  00000000;              -- 
[2C..2D]:  11111111;              -- 
2E        :  00000000;              -- sign: .data 2 1 ; sign: (1 or -1)
2F        :  00000001;              -- 
30        :  00000000;              -- one: .data 2 1 ; constant 1
31        :  00000001;              -- 
[32..FF]:  00000000;              -- 
END;
